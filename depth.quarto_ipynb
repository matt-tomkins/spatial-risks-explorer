{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Depth\"\n",
        "---\n",
        "\n",
        "> Explore the effects of changing the canal depth (test).\n",
        "\n",
        "Text goes here\n"
      ],
      "id": "8c814838"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| warning: false\n",
        "\n",
        "import glob\n",
        "import json\n",
        "from datetime import datetime\n",
        "import plotly.graph_objects as go\n",
        "import plotly.io as pio\n",
        "\n",
        "# List files of interest\n",
        "variable = \"draught\"\n",
        "files = glob.glob(f'./data/rc_9_including_{variable}*.json')\n",
        "\n",
        "# Create a Plotly figure, colour list\n",
        "fig = go.Figure()\n",
        "colours = [\"#4daeff\", \"#b64dff\", \"#ff5d4d\", \"#ff7000\"]\n",
        "\n",
        "# Iterate and load\n",
        "for f, c in zip(files, colours):\n",
        "    with open(f, 'r') as file:\n",
        "        data = json.load(file)\n",
        "\n",
        "    # Extract lists of values to plot, converting to celcius\n",
        "    modelled_water = [x['surface_water_k'] - 273.15 for x in data.values()]\n",
        "\n",
        "    # List of dict keys (unix), convert to datetime format\n",
        "    modelled_dt = list(data.keys())\n",
        "    modelled_datetime = [datetime.utcfromtimestamp(int(x)) for x in modelled_dt]\n",
        "\n",
        "    # Add trace\n",
        "    if int(f[-6]) == 0:\n",
        "        fig.add_trace(go.Scatter(x=modelled_datetime, y=modelled_water, mode='lines', \n",
        "        line_color = c, opacity=0.5, name=f\"+{f[-6]}°C\"))\n",
        "\n",
        "    # Else, hide to start\n",
        "    else:\n",
        "        fig.add_trace(go.Scatter(x=modelled_datetime, y=modelled_water, mode='lines', \n",
        "        line_color = c, opacity=0.5, visible=\"legendonly\", name=f\"+{f[-6]}°C\"))\n",
        "\n",
        "\n",
        "# Axis labels\n",
        "fig.update_layout(\n",
        "    xaxis_title=\"Date\", yaxis_title=\"Water temperature (°C)\", \n",
        "    legend_title=\"Air temperature\",\n",
        "    legend=dict(yanchor=\"top\", y=0.99, xanchor=\"left\", x=0.01))\n",
        "\n",
        "# Save the figure as an HTML file\n",
        "#fig.write_html(\"./images/depth_water_temperature.html\")\n",
        "\n",
        "fig.show()"
      ],
      "id": "e476f894",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<iframe src=\"./images/depth_water_temperature.html\" width=\"100%\" height=\"600px\"></iframe>\n"
      ],
      "id": "1df8b4c0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| warning: false\n",
        "\n",
        "import glob\n",
        "import json\n",
        "from datetime import datetime\n",
        "import plotly.graph_objects as go\n",
        "import plotly.io as pio\n",
        "from pandas import to_datetime\n",
        "from datetime import timedelta\n",
        "\n",
        "# Load summary file of interest\n",
        "variable = \"draught\"\n",
        "with open(f'./data/rc_9-{variable}-summary.json', 'r') as file:\n",
        "        data = json.load(file)\n",
        "\n",
        "# Localise niave datetime to aware datetime (UK) and then convert to UTC\n",
        "local_datetime = to_datetime(\"2022-01-01 10:00:00\")\\\n",
        ".tz_localize('Europe/London')\\\n",
        ".tz_convert('UTC')\n",
        "\n",
        "# Create a Plotly figure, colour list\n",
        "fig = go.Figure()\n",
        "colours = [\"#4daeff\", \"#b64dff\", \"#ff5d4d\", \"#ff7000\"]\n",
        "\n",
        "# Extract and sort keys\n",
        "key_list = data.keys()\n",
        "sorted_keys = sorted(key_list, key=lambda data: float(data[30:][:-5]))\n",
        "\n",
        "# Iterate and extract data\n",
        "for k, c in zip(sorted_keys, colours):\n",
        "  value = data[k]\n",
        "\n",
        "  # X-axis position\n",
        "  change = float(k[30:][:-5])\n",
        "\n",
        "  # Extract values\n",
        "  median = value['day values']['median']\n",
        "  ymin = abs(median - value['day values']['q1'])\n",
        "  ymax = abs(median - value['day values']['q3'])\n",
        "\n",
        "  # Add to plot\n",
        "  if change == 1:\n",
        "    fig.add_scatter(x = [change], \n",
        "    y = [median],\n",
        "    name = f\"×{change}\",\n",
        "    mode='markers',\n",
        "    marker=dict(color=c),\n",
        "    error_y = dict(type = 'data', color = c,\n",
        "    symmetric = False,\n",
        "    array = [ymax],\n",
        "    arrayminus = [ymin]))\n",
        "\n",
        "  # Hide to start\n",
        "  else:\n",
        "    fig.add_scatter(x = [change], \n",
        "    y = [median],\n",
        "    name = f\"+{change} m\",\n",
        "    mode='markers',\n",
        "    marker=dict(color=c),\n",
        "    visible='legendonly',\n",
        "    error_y = dict(type = 'data', color = c,\n",
        "    symmetric = False,\n",
        "    array = [ymax],\n",
        "    arrayminus = [ymin]))\n",
        "\n",
        "\n",
        "# Axis labels\n",
        "fig.update_layout(\n",
        "    xaxis_title=\"Increase in canal depth (m)\", yaxis_title=\"Air temperature effect (°C)\", \n",
        "    legend=dict(orientation=\"h\",\n",
        "    yanchor=\"bottom\", y=1.02,\n",
        "    xanchor=\"left\", x=0, \n",
        "    title = \"Canal depth\"\n",
        "))\n",
        "\n",
        "# Save the figure as an HTML file\n",
        "#fig.write_html(\"./images/draught_effects.html\")\n",
        "\n",
        "fig.show()"
      ],
      "id": "ee02a449",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<iframe src=\"./images/draught_effects.html\" width=\"100%\" height=\"600px\"></iframe>\n",
        "\n",
        "> How does canal area influence the magnitude of the effect of the surrounding air?"
      ],
      "id": "59b13fd5"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\44797\\miniforge3\\envs\\quarto-spatial\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}