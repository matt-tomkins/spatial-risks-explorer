---
title: "Shading"
---

In the remainder of the practical, we will consider the **sensitivity** of the results to the choice of inputs. This is a key part of model evaluation - how do the results change as the inputs change?

One key input for the model is the degree of **shading** of the canal by nearby buildings.

- What happens to the results if we *exclude* shading from the model?
- What happens to the results if we *change* the degree of shading?

While these questions are important for model evaluation, they also have important consequences for the management, development and governance of urban areas. This is of  particular relevance for Manchester, which has a rapidly developing skyline (see [the Guardian](https://www.theguardian.com/artanddesign/2024/feb/18/manchester-skyline-skycrapers-high-rise-towers-poplin-is-up-the-only-way-viadux-gary-neville)):

![Skyscraping Manchester, December 2023. Photograph: Bardhok Ndoji/Alamy](images\manchester-skyline.png){width=100%}

The transformation of the skyline over the last 15 years is quite remarkable: 

::: {#fig-elephants layout-ncol=2}

![2008](./images/moseley-2008.png){#fig-2008}

![2024](./images/moseley-2024.png){#fig-2024}

The changing skyline at Lower Moseley Street
:::

With construction of new office and residential buildings on *brownfield* sites (previously developed for industrial or commercial purposes), and on sites close to the canal network, there is potential for increased shading of our waterways. How will this influence water temperature and the effects of the waterways on air temperature?

<br>

## An exploration

To explore the effects of shading, we'll focus on one single section of the Bridgewater Canal (`bc_77`).

This is a relatively large canal section, but there are few tall buildings in the surrounding area (*Cornbrook*) and as a result, minimal shading across the year. As a former industrial area, there is potential for new buildings and 'regeneration'. 

![Bartholomew map of Cornbrook (1900). [Source](https://manchester.publicprofiler.org/beta/index.php)](images\bartholomew-1900-map.png){width=80%}

> Inspect the canal and the nearby building geometries.

```{python}
#| echo: false

# Source: https://www.riannek.de/2022/gpx-to-geopandas/
import folium
import os
import json
import branca.colormap as cm
from geopandas import read_file, GeoDataFrame
from pandas import concat
from folium.plugins import GroupedLayerControl

# Step 3: Define the style function
def building_style(feature):
    # Step 3a: Extract color (assuming your hex color code column is called 'color')
    color = feature['properties'].get('colour', '#FFFFFF')  # Default to white if 'color' is missing
    
    # Step 3b: Return style settings
    return {
        'fillColor': color,
        'color': "#505050",  # Border color, same as fill
        'weight': 0.5,      # Border thickness
        'fillOpacity': 1  # Fill opacity
    }

def add_popup(feature):
    # Define the pop-up content (you can customize it here)
    popup_content = f"Attribute Value: {feature['properties'].get('relhaxmax', 'N/A')}"
    return folium.Popup(popup_content, max_width=300)

# Load canals data
with open('./data/manchester-canals-4326.geojson', 'r') as f:
    data = json.load(f)

# Read buildings data
buildings = read_file('./data/bc_77-buildings-4326.shp')

# Create colour ramp for buildings
colour_ramp = cm.linear.viridis.scale(min(buildings.relhmax), max(buildings.relhmax))
colour_ramp.caption = "Building height (m)"

# Add colour column based on relative height max
buildings['colour'] = [colour_ramp(x) for x in buildings['relhmax']]

# Extract data and init dict
#canals = data['features']
#buildings = b['features']

# Canal name
id = "bc_77"
extract = data['features']

# Filter based on canal names
filtered = [geo for geo in extract if geo['properties']['code_id'] == id]
excluded = [geo for geo in extract if geo['properties']['code_id'] != id]

# Convert to GeoJSON feature collection format
filtered_dict = {
    "type": "FeatureCollection",
    "name": id,
    "crs": { "type": "name", "properties": { "name": "urn:ogc:def:crs:OGC:1.3:CRS84" } },
    "features": filtered}
excluded_dict = {
    "type": "FeatureCollection",
    "name": f"not-{id}",
    "crs": { "type": "name", "properties": { "name": "urn:ogc:def:crs:OGC:1.3:CRS84" } },
    "features": excluded}

# Create map
m = folium.Map(location=(53.472648,-2.241951), zoom_start=11, 
                tiles="Cartodb Positron")

# Add canals
folium.GeoJson(filtered_dict, style_function=lambda feature: {
"fillColor": "#72b4f9",
"color": "#2b5d93"}, name="Canals",
zoom_on_click=True).add_to(m)

# Fit to map content
folium.FitOverlays().add_to(m)

# Add buildings
folium.GeoJson(buildings, style_function=building_style, name="Building geometries",
popup=folium.GeoJsonPopup(fields=['relhmax'], labels=True), 
zoom_on_click=True).add_to(m)

# Add other canals
folium.GeoJson(excluded_dict, style_function=lambda feature: {
    "fillColor": "#d6e7f9",
    "color": "#85add6"}, name="Neighbouring canals",
    zoom_on_click=True).add_to(m)

# Add layer control
folium.LayerControl().add_to(m)

# Show map
m

```

<br>

The plot below shows the modelled water temperature for `bc_77`, including the effects of shading.

> Inspect the plot, which also includes the model with shading effects excluded (i.e., shading proportion = 0) and with full shading (i.e., shading proportion = 1). 

```{python}
#| echo: false
#| warning: false

import json
from datetime import datetime
import plotly.graph_objects as go
import plotly.io as pio

# Load canals data
with open('./data/bc_77_excluding_shading.json', 'r') as f:
    excluding_data = json.load(f)

# Load buildings data
with open('./data/bc_77_including_shading.json', 'r') as f:
    including_data = json.load(f)

with open('./data/bc_77_including_shading_full.json', 'r') as f:
    full_shading = json.load(f)

# Extract water temperature values, excluding | including shading effects
excluding_water = [x['surface_water_k'] - 273.15 for x in excluding_data.values()]
including_water = [x['surface_water_k'] - 273.15 for x in including_data.values()]
full_water = [x['surface_water_k'] - 273.15 for x in full_shading.values()]

 # Extract water temperature values, excluding | including shading effects
excluding_concrete = [x['surface_concrete_k'] - 273.15 for x in excluding_data.values()]
including_concrete = [x['surface_concrete_k'] - 273.15 for x in including_data.values()]
full_concrete =  [x['surface_concrete_k'] - 273.15 for x in full_shading.values()]

# Extract differences
diff_water = [e - i  for e, i in zip(excluding_water, including_water)]  
diff_concrete = [e - i  for e, i in zip(excluding_concrete, including_concrete)]  

# List of dict keys (unix), convert to datetime format
dt = list(excluding_data.keys())
dt_datetime = [datetime.utcfromtimestamp(int(x)) for x in dt]

# Create a Plotly figure
fig = go.Figure()
fig.add_trace(go.Scatter(x=dt_datetime, y=full_water, mode='lines', 
line_color = "#3f9cff", opacity=0.75, visible='legendonly', name='Full shading'))
fig.add_trace(go.Scatter(x=dt_datetime, y=including_water, mode='lines', 
line_color = "#707070", opacity=0.75, name='Including shading'))
fig.add_trace(go.Scatter(x=dt_datetime, y=excluding_water, mode='lines', 
line_color = "#FFB16F", opacity=0.75, visible='legendonly', name='Excluding shading'))

# Axis labels
fig.update_layout(
    xaxis_title="Date", yaxis_title="Water temperature (Â°C)", 
    legend_title="Shading amount",
    legend=dict(yanchor="top", y=0.99, xanchor="left", x=0.01))

# Save the figure as an HTML file
fig.write_html("./images/shading_water_temperature.html")

# Optionally, display the plot inline
# fig.show()

```

<iframe src="./images/shading_water_temperature.html" width="100%" height="600px"></iframe>

> To what extent is the current degree of shading an important control on water temperature?

> How does water temperature change if the canal is fully shaded? When is this most important?

## Air temperature 

The above plot shows that water temperatures *are* influenced by the degree of shading, but how does this influence the effects of waterways on air temperatures?

This is illustrated in the plot below, where the 0 line (`y` axis) represents the modelled effects on air temperature when shading effects are *excluded*. This can then be compared to:

- a model incorproating the true shading of `bc_77` [*including_shading*]
- a model incorproating full shading (shading proportion = 1) [*full_shading*]
- a model where the shading proportion is based on a nearby section of the Rochdale Canal (`rc_9`) [*developed_shading*]. This is closer to the city centre and is highly shaded by nearby buildings, so is used here as a proxy for the shading that *could* occur if this area was extensively developed. 

**Note**: model results are presented *relative* to the the model excluding shading, where negative values denote relative cooling, and positive values denote relative warming.

```{python}
#| echo: false
#| warning: false

import glob
import json
from datetime import datetime
import plotly.graph_objects as go
import plotly.io as pio
from pandas import to_datetime
from datetime import timedelta

# Load summary file of interest
variable = "shading"
with open(f'./data/bc_77-{variable}-summary.json', 'r') as file:
        data = json.load(file)

# Localise niave datetime to aware datetime (UK) and then convert to UTC
local_datetime = to_datetime("2022-01-01 10:00:00")\
.tz_localize('Europe/London')\
.tz_convert('UTC')

# Create a Plotly figure, colour list
fig = go.Figure()
colours = ["#3f9cff", "#707070", "#FFB16F","#ff7764"]

# Use excluding shading as the baseline
baseline = data['.\\bc_77_excluding_shading.json']
baseline_day = baseline['weekly values']['day medians'][:-1]
baseline_night = baseline['weekly values']['night medians'][:-1]

# Keys and labels
keys = ['.\\bc_77_excluding_shading.json', '.\\bc_77_including_shading.json', 
'.\\bc_77_including_rc_9.json', '.\\bc_77_including_shading_full.json']
labels = ['Excluding shading', 'Including shading', 'Developed shading', 'Full shading']

# Iterate through
for key, label, c in zip(keys, labels, colours):

    # Extract data
    value = data[key]

    # Weekly values, ignore final entry
    day_gross = value['weekly values']['day medians'][:-1]
    night_gross = value['weekly values']['night medians'][:-1]

    # Calculate net difference
    day_medians = [x - y for x, y in zip(day_gross, baseline_day)]
    night_medians = [x - y for x, y in zip(night_gross, baseline_day)]

    # Create list of datetimes for x-axis
    dt = [local_datetime + timedelta(days = 3 + (7 * n)) for n in range(0, len(day_medians))]

    # Add trace
    if key == '.\\bc_77_excluding_shading.json':
        fig.add_trace(go.Scatter(x=dt, y=day_medians, mode='lines', 
        line_color = c, opacity=0.75, name=label))

    # Else, hide to start
    else:
        fig.add_trace(go.Scatter(x=dt, y=day_medians, mode='lines', 
        line_color = c, opacity=0.75, visible="legendonly", name=label))

# Axis labels
fig.update_layout(
    xaxis_title="Date", yaxis_title="Net change in air temperature (Â°C)", 
    legend=dict(orientation="h",
    yanchor="bottom", y=-0.3,
    xanchor="left", x=0, 
    title = "Shading amount"
))



# Save the figure as an HTML file
fig.write_html("./images/shading_effects.html")

#fig.show()

```

<iframe src="./images/shading_effects.html" width="100%" height="600px"></iframe>

> How does adding shading (true / full / potential) influence the effect of the canal on air temperatures? 

> What is the magnitude of the potential change? 